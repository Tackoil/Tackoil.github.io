import{_ as n,p as s,q as a,v as t,y as e,Q as p}from"./framework-1508a596.js";const o="/assets/jsdebug-b5d1a24a.png",c={},u=e("p",null,"这篇文章将简单解释一下 JavaScript 中列表的解构赋值的细节和执行顺序。新特性还是要谨慎使用。",-1),i=p(`<h1 id="起因" tabindex="-1"><a class="header-anchor" href="#起因" aria-hidden="true">#</a> 起因</h1><p>在有次 leetcode 中的经典题目 <a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/" target="_blank" rel="noopener noreferrer">剑指 Offer 03. 数组中重复的数字</a> 中遇到一个小问题。简单概括，这道题需要从左往右依次将数字放到对应下标上，直到发现两个相同的数字为止。一个很直观的想法就是使用解构赋值以避免使用程序员搬家。完整的程序就大概是长下面这个样子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">findRepeatNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// The following line will not work as the expect.</span>
            <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果输入进行测试，可以喜闻乐见地发现 TLE 了。这么简单的代码应该不会超时啊。</p><h1 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h1><p>在每次交换后输出 <code>nums</code> 观察结果。第一步的输出显然应该是 <code>[1, 3, 2, 0, 2, 5, 3]</code> ，因为把<code>2</code>移动到了下标<code>2</code>上，和原本那个位置上的数字<code>1</code>进行交换。然而实际上是这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[ 1, 2, 1, 0, 2, 5, 3 ]
[ 2, 2, 1, 0, 2, 5, 3 ]
[ 1, 2, 1, 0, 2, 5, 3 ]
[ 2, 2, 1, 0, 2, 5, 3 ]
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现第一行输出就与期望值严重不符。从输出实在看不出来原因，就调试了一下。</p><p><img src="`+o+'" alt="调试中" title="调试中"></p><p>可以发现调试步骤可以停在左侧列表中的第二项。意味着 JavaScript 会先对左侧第一项<code>nums[i]</code>进行赋值并存储，然后再对第二项<code>nums[nums[i]]</code>进行赋值。可以发现在赋值左侧第二项时，索引<code>nums[i]</code>已经发生了修改，也就导致无法正常工作了。</p><p>结合上面的例子。<code>i=0</code>时，<code>nums[i]=1</code>。<code>nums[nums[i]]=2</code>。因此第0项赋值为<code>2</code>，然后对第2项赋值为1。最终得到上面的结果。（当然，死循环是巧合，并非每次都会触发。）</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>当时觉得这个问题只有 JavaScript 才会遇到，Python是没问题的。后来实验了一下，Python也是按照这种方式进行赋值的。所以还是尽量不要写这种奇怪的语法吧。</p>',13);function l(r,d){return s(),a("div",null,[u,t(" more "),i])}const m=n(c,[["render",l],["__file","js-destructuring-assignment.html.vue"]]);export{m as default};
